/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dkcb.model.impl;

import com.dkcb.model.Dichvu;
import com.dkcb.model.DichvuModel;
import com.dkcb.model.DichvuSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dichvu service. Represents a row in the &quot;u_Dichvu&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dkcb.model.DichvuModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DichvuImpl}.
 * </p>
 *
 * @author hoang_000
 * @see DichvuImpl
 * @see com.dkcb.model.Dichvu
 * @see com.dkcb.model.DichvuModel
 * @generated
 */
@JSON(strict = true)
public class DichvuModelImpl extends BaseModelImpl<Dichvu>
	implements DichvuModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dichvu model instance should use the {@link com.dkcb.model.Dichvu} interface instead.
	 */
	public static final String TABLE_NAME = "u_Dichvu";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Iddichvu", Types.BIGINT },
			{ "Tendichvu", Types.VARCHAR },
			{ "Mucthu", Types.DOUBLE },
			{ "Ghichi", Types.VARCHAR },
			{ "Idphongkham", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table u_Dichvu (Iddichvu LONG not null primary key IDENTITY,Tendichvu VARCHAR(75) null,Mucthu DOUBLE,Ghichi VARCHAR(75) null,Idphongkham VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table u_Dichvu";
	public static final String ORDER_BY_JPQL = " ORDER BY dichvu.Iddichvu ASC";
	public static final String ORDER_BY_SQL = " ORDER BY u_Dichvu.Iddichvu ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dkcb.model.Dichvu"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dkcb.model.Dichvu"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dichvu toModel(DichvuSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dichvu model = new DichvuImpl();

		model.setIddichvu(soapModel.getIddichvu());
		model.setTendichvu(soapModel.getTendichvu());
		model.setMucthu(soapModel.getMucthu());
		model.setGhichi(soapModel.getGhichi());
		model.setIdphongkham(soapModel.getIdphongkham());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dichvu> toModels(DichvuSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dichvu> models = new ArrayList<Dichvu>(soapModels.length);

		for (DichvuSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dkcb.model.Dichvu"));

	public DichvuModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Iddichvu;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIddichvu(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Iddichvu;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dichvu.class;
	}

	@Override
	public String getModelClassName() {
		return Dichvu.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Iddichvu", getIddichvu());
		attributes.put("Tendichvu", getTendichvu());
		attributes.put("Mucthu", getMucthu());
		attributes.put("Ghichi", getGhichi());
		attributes.put("Idphongkham", getIdphongkham());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Iddichvu = (Long)attributes.get("Iddichvu");

		if (Iddichvu != null) {
			setIddichvu(Iddichvu);
		}

		String Tendichvu = (String)attributes.get("Tendichvu");

		if (Tendichvu != null) {
			setTendichvu(Tendichvu);
		}

		Double Mucthu = (Double)attributes.get("Mucthu");

		if (Mucthu != null) {
			setMucthu(Mucthu);
		}

		String Ghichi = (String)attributes.get("Ghichi");

		if (Ghichi != null) {
			setGhichi(Ghichi);
		}

		String Idphongkham = (String)attributes.get("Idphongkham");

		if (Idphongkham != null) {
			setIdphongkham(Idphongkham);
		}
	}

	@JSON
	@Override
	public long getIddichvu() {
		return _Iddichvu;
	}

	@Override
	public void setIddichvu(long Iddichvu) {
		_Iddichvu = Iddichvu;
	}

	@JSON
	@Override
	public String getTendichvu() {
		if (_Tendichvu == null) {
			return StringPool.BLANK;
		}
		else {
			return _Tendichvu;
		}
	}

	@Override
	public void setTendichvu(String Tendichvu) {
		_Tendichvu = Tendichvu;
	}

	@JSON
	@Override
	public double getMucthu() {
		return _Mucthu;
	}

	@Override
	public void setMucthu(double Mucthu) {
		_Mucthu = Mucthu;
	}

	@JSON
	@Override
	public String getGhichi() {
		if (_Ghichi == null) {
			return StringPool.BLANK;
		}
		else {
			return _Ghichi;
		}
	}

	@Override
	public void setGhichi(String Ghichi) {
		_Ghichi = Ghichi;
	}

	@JSON
	@Override
	public String getIdphongkham() {
		if (_Idphongkham == null) {
			return StringPool.BLANK;
		}
		else {
			return _Idphongkham;
		}
	}

	@Override
	public void setIdphongkham(String Idphongkham) {
		_Idphongkham = Idphongkham;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Dichvu.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dichvu toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dichvu)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DichvuImpl dichvuImpl = new DichvuImpl();

		dichvuImpl.setIddichvu(getIddichvu());
		dichvuImpl.setTendichvu(getTendichvu());
		dichvuImpl.setMucthu(getMucthu());
		dichvuImpl.setGhichi(getGhichi());
		dichvuImpl.setIdphongkham(getIdphongkham());

		dichvuImpl.resetOriginalValues();

		return dichvuImpl;
	}

	@Override
	public int compareTo(Dichvu dichvu) {
		long primaryKey = dichvu.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dichvu)) {
			return false;
		}

		Dichvu dichvu = (Dichvu)obj;

		long primaryKey = dichvu.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Dichvu> toCacheModel() {
		DichvuCacheModel dichvuCacheModel = new DichvuCacheModel();

		dichvuCacheModel.Iddichvu = getIddichvu();

		dichvuCacheModel.Tendichvu = getTendichvu();

		String Tendichvu = dichvuCacheModel.Tendichvu;

		if ((Tendichvu != null) && (Tendichvu.length() == 0)) {
			dichvuCacheModel.Tendichvu = null;
		}

		dichvuCacheModel.Mucthu = getMucthu();

		dichvuCacheModel.Ghichi = getGhichi();

		String Ghichi = dichvuCacheModel.Ghichi;

		if ((Ghichi != null) && (Ghichi.length() == 0)) {
			dichvuCacheModel.Ghichi = null;
		}

		dichvuCacheModel.Idphongkham = getIdphongkham();

		String Idphongkham = dichvuCacheModel.Idphongkham;

		if ((Idphongkham != null) && (Idphongkham.length() == 0)) {
			dichvuCacheModel.Idphongkham = null;
		}

		return dichvuCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{Iddichvu=");
		sb.append(getIddichvu());
		sb.append(", Tendichvu=");
		sb.append(getTendichvu());
		sb.append(", Mucthu=");
		sb.append(getMucthu());
		sb.append(", Ghichi=");
		sb.append(getGhichi());
		sb.append(", Idphongkham=");
		sb.append(getIdphongkham());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.dkcb.model.Dichvu");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Iddichvu</column-name><column-value><![CDATA[");
		sb.append(getIddichvu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Tendichvu</column-name><column-value><![CDATA[");
		sb.append(getTendichvu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Mucthu</column-name><column-value><![CDATA[");
		sb.append(getMucthu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Ghichi</column-name><column-value><![CDATA[");
		sb.append(getGhichi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Idphongkham</column-name><column-value><![CDATA[");
		sb.append(getIdphongkham());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Dichvu.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Dichvu.class };
	private long _Iddichvu;
	private String _Tendichvu;
	private double _Mucthu;
	private String _Ghichi;
	private String _Idphongkham;
	private Dichvu _escapedModel;
}