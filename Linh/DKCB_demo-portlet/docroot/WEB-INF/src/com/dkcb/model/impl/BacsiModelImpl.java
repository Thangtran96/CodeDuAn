/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dkcb.model.impl;

import com.dkcb.model.Bacsi;
import com.dkcb.model.BacsiModel;
import com.dkcb.model.BacsiSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Bacsi service. Represents a row in the &quot;u_Bacsi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dkcb.model.BacsiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BacsiImpl}.
 * </p>
 *
 * @author hoang_000
 * @see BacsiImpl
 * @see com.dkcb.model.Bacsi
 * @see com.dkcb.model.BacsiModel
 * @generated
 */
@JSON(strict = true)
public class BacsiModelImpl extends BaseModelImpl<Bacsi> implements BacsiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bacsi model instance should use the {@link com.dkcb.model.Bacsi} interface instead.
	 */
	public static final String TABLE_NAME = "u_Bacsi";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Idbacsi", Types.VARCHAR },
			{ "TenBS", Types.VARCHAR },
			{ "Idphongkham", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table u_Bacsi (Idbacsi VARCHAR(75) not null primary key,TenBS VARCHAR(75) null,Idphongkham VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table u_Bacsi";
	public static final String ORDER_BY_JPQL = " ORDER BY bacsi.Idbacsi ASC";
	public static final String ORDER_BY_SQL = " ORDER BY u_Bacsi.Idbacsi ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dkcb.model.Bacsi"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dkcb.model.Bacsi"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Bacsi toModel(BacsiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Bacsi model = new BacsiImpl();

		model.setIdbacsi(soapModel.getIdbacsi());
		model.setTenBS(soapModel.getTenBS());
		model.setIdphongkham(soapModel.getIdphongkham());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Bacsi> toModels(BacsiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Bacsi> models = new ArrayList<Bacsi>(soapModels.length);

		for (BacsiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dkcb.model.Bacsi"));

	public BacsiModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _Idbacsi;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setIdbacsi(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Idbacsi;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Bacsi.class;
	}

	@Override
	public String getModelClassName() {
		return Bacsi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Idbacsi", getIdbacsi());
		attributes.put("TenBS", getTenBS());
		attributes.put("Idphongkham", getIdphongkham());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String Idbacsi = (String)attributes.get("Idbacsi");

		if (Idbacsi != null) {
			setIdbacsi(Idbacsi);
		}

		String TenBS = (String)attributes.get("TenBS");

		if (TenBS != null) {
			setTenBS(TenBS);
		}

		String Idphongkham = (String)attributes.get("Idphongkham");

		if (Idphongkham != null) {
			setIdphongkham(Idphongkham);
		}
	}

	@JSON
	@Override
	public String getIdbacsi() {
		if (_Idbacsi == null) {
			return StringPool.BLANK;
		}
		else {
			return _Idbacsi;
		}
	}

	@Override
	public void setIdbacsi(String Idbacsi) {
		_Idbacsi = Idbacsi;
	}

	@JSON
	@Override
	public String getTenBS() {
		if (_TenBS == null) {
			return StringPool.BLANK;
		}
		else {
			return _TenBS;
		}
	}

	@Override
	public void setTenBS(String TenBS) {
		_TenBS = TenBS;
	}

	@JSON
	@Override
	public String getIdphongkham() {
		if (_Idphongkham == null) {
			return StringPool.BLANK;
		}
		else {
			return _Idphongkham;
		}
	}

	@Override
	public void setIdphongkham(String Idphongkham) {
		_Idphongkham = Idphongkham;
	}

	@Override
	public Bacsi toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Bacsi)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BacsiImpl bacsiImpl = new BacsiImpl();

		bacsiImpl.setIdbacsi(getIdbacsi());
		bacsiImpl.setTenBS(getTenBS());
		bacsiImpl.setIdphongkham(getIdphongkham());

		bacsiImpl.resetOriginalValues();

		return bacsiImpl;
	}

	@Override
	public int compareTo(Bacsi bacsi) {
		String primaryKey = bacsi.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Bacsi)) {
			return false;
		}

		Bacsi bacsi = (Bacsi)obj;

		String primaryKey = bacsi.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Bacsi> toCacheModel() {
		BacsiCacheModel bacsiCacheModel = new BacsiCacheModel();

		bacsiCacheModel.Idbacsi = getIdbacsi();

		String Idbacsi = bacsiCacheModel.Idbacsi;

		if ((Idbacsi != null) && (Idbacsi.length() == 0)) {
			bacsiCacheModel.Idbacsi = null;
		}

		bacsiCacheModel.TenBS = getTenBS();

		String TenBS = bacsiCacheModel.TenBS;

		if ((TenBS != null) && (TenBS.length() == 0)) {
			bacsiCacheModel.TenBS = null;
		}

		bacsiCacheModel.Idphongkham = getIdphongkham();

		String Idphongkham = bacsiCacheModel.Idphongkham;

		if ((Idphongkham != null) && (Idphongkham.length() == 0)) {
			bacsiCacheModel.Idphongkham = null;
		}

		return bacsiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{Idbacsi=");
		sb.append(getIdbacsi());
		sb.append(", TenBS=");
		sb.append(getTenBS());
		sb.append(", Idphongkham=");
		sb.append(getIdphongkham());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.dkcb.model.Bacsi");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Idbacsi</column-name><column-value><![CDATA[");
		sb.append(getIdbacsi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TenBS</column-name><column-value><![CDATA[");
		sb.append(getTenBS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Idphongkham</column-name><column-value><![CDATA[");
		sb.append(getIdphongkham());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Bacsi.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Bacsi.class };
	private String _Idbacsi;
	private String _TenBS;
	private String _Idphongkham;
	private Bacsi _escapedModel;
}