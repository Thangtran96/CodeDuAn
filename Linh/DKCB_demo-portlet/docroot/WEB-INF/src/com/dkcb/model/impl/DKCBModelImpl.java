/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dkcb.model.impl;

import com.dkcb.model.DKCB;
import com.dkcb.model.DKCBModel;
import com.dkcb.model.DKCBSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DKCB service. Represents a row in the &quot;u_DKCB&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dkcb.model.DKCBModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DKCBImpl}.
 * </p>
 *
 * @author hoang_000
 * @see DKCBImpl
 * @see com.dkcb.model.DKCB
 * @see com.dkcb.model.DKCBModel
 * @generated
 */
@JSON(strict = true)
public class DKCBModelImpl extends BaseModelImpl<DKCB> implements DKCBModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d k c b model instance should use the {@link com.dkcb.model.DKCB} interface instead.
	 */
	public static final String TABLE_NAME = "u_DKCB";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.BIGINT },
			{ "Hoten", Types.VARCHAR },
			{ "Diachi", Types.VARCHAR },
			{ "Gioitinh", Types.BOOLEAN },
			{ "Sodienthoai", Types.VARCHAR },
			{ "Ngaysinh", Types.TIMESTAMP },
			{ "Trieuchung", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table u_DKCB (Id LONG not null primary key IDENTITY,Hoten VARCHAR(75) null,Diachi VARCHAR(75) null,Gioitinh BOOLEAN,Sodienthoai VARCHAR(75) null,Ngaysinh DATE null,Trieuchung VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table u_DKCB";
	public static final String ORDER_BY_JPQL = " ORDER BY dkcb.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY u_DKCB.Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dkcb.model.DKCB"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dkcb.model.DKCB"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DKCB toModel(DKCBSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DKCB model = new DKCBImpl();

		model.setId(soapModel.getId());
		model.setHoten(soapModel.getHoten());
		model.setDiachi(soapModel.getDiachi());
		model.setGioitinh(soapModel.getGioitinh());
		model.setSodienthoai(soapModel.getSodienthoai());
		model.setNgaysinh(soapModel.getNgaysinh());
		model.setTrieuchung(soapModel.getTrieuchung());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DKCB> toModels(DKCBSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DKCB> models = new ArrayList<DKCB>(soapModels.length);

		for (DKCBSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dkcb.model.DKCB"));

	public DKCBModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DKCB.class;
	}

	@Override
	public String getModelClassName() {
		return DKCB.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("Hoten", getHoten());
		attributes.put("Diachi", getDiachi());
		attributes.put("Gioitinh", getGioitinh());
		attributes.put("Sodienthoai", getSodienthoai());
		attributes.put("Ngaysinh", getNgaysinh());
		attributes.put("Trieuchung", getTrieuchung());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String Hoten = (String)attributes.get("Hoten");

		if (Hoten != null) {
			setHoten(Hoten);
		}

		String Diachi = (String)attributes.get("Diachi");

		if (Diachi != null) {
			setDiachi(Diachi);
		}

		Boolean Gioitinh = (Boolean)attributes.get("Gioitinh");

		if (Gioitinh != null) {
			setGioitinh(Gioitinh);
		}

		String Sodienthoai = (String)attributes.get("Sodienthoai");

		if (Sodienthoai != null) {
			setSodienthoai(Sodienthoai);
		}

		Date Ngaysinh = (Date)attributes.get("Ngaysinh");

		if (Ngaysinh != null) {
			setNgaysinh(Ngaysinh);
		}

		String Trieuchung = (String)attributes.get("Trieuchung");

		if (Trieuchung != null) {
			setTrieuchung(Trieuchung);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public String getHoten() {
		if (_Hoten == null) {
			return StringPool.BLANK;
		}
		else {
			return _Hoten;
		}
	}

	@Override
	public void setHoten(String Hoten) {
		_Hoten = Hoten;
	}

	@JSON
	@Override
	public String getDiachi() {
		if (_Diachi == null) {
			return StringPool.BLANK;
		}
		else {
			return _Diachi;
		}
	}

	@Override
	public void setDiachi(String Diachi) {
		_Diachi = Diachi;
	}

	@JSON
	@Override
	public boolean getGioitinh() {
		return _Gioitinh;
	}

	@Override
	public boolean isGioitinh() {
		return _Gioitinh;
	}

	@Override
	public void setGioitinh(boolean Gioitinh) {
		_Gioitinh = Gioitinh;
	}

	@JSON
	@Override
	public String getSodienthoai() {
		if (_Sodienthoai == null) {
			return StringPool.BLANK;
		}
		else {
			return _Sodienthoai;
		}
	}

	@Override
	public void setSodienthoai(String Sodienthoai) {
		_Sodienthoai = Sodienthoai;
	}

	@JSON
	@Override
	public Date getNgaysinh() {
		return _Ngaysinh;
	}

	@Override
	public void setNgaysinh(Date Ngaysinh) {
		_Ngaysinh = Ngaysinh;
	}

	@JSON
	@Override
	public String getTrieuchung() {
		if (_Trieuchung == null) {
			return StringPool.BLANK;
		}
		else {
			return _Trieuchung;
		}
	}

	@Override
	public void setTrieuchung(String Trieuchung) {
		_Trieuchung = Trieuchung;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DKCB.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DKCB toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DKCB)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DKCBImpl dkcbImpl = new DKCBImpl();

		dkcbImpl.setId(getId());
		dkcbImpl.setHoten(getHoten());
		dkcbImpl.setDiachi(getDiachi());
		dkcbImpl.setGioitinh(getGioitinh());
		dkcbImpl.setSodienthoai(getSodienthoai());
		dkcbImpl.setNgaysinh(getNgaysinh());
		dkcbImpl.setTrieuchung(getTrieuchung());

		dkcbImpl.resetOriginalValues();

		return dkcbImpl;
	}

	@Override
	public int compareTo(DKCB dkcb) {
		int value = 0;

		if (getId() < dkcb.getId()) {
			value = -1;
		}
		else if (getId() > dkcb.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DKCB)) {
			return false;
		}

		DKCB dkcb = (DKCB)obj;

		long primaryKey = dkcb.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DKCB> toCacheModel() {
		DKCBCacheModel dkcbCacheModel = new DKCBCacheModel();

		dkcbCacheModel.Id = getId();

		dkcbCacheModel.Hoten = getHoten();

		String Hoten = dkcbCacheModel.Hoten;

		if ((Hoten != null) && (Hoten.length() == 0)) {
			dkcbCacheModel.Hoten = null;
		}

		dkcbCacheModel.Diachi = getDiachi();

		String Diachi = dkcbCacheModel.Diachi;

		if ((Diachi != null) && (Diachi.length() == 0)) {
			dkcbCacheModel.Diachi = null;
		}

		dkcbCacheModel.Gioitinh = getGioitinh();

		dkcbCacheModel.Sodienthoai = getSodienthoai();

		String Sodienthoai = dkcbCacheModel.Sodienthoai;

		if ((Sodienthoai != null) && (Sodienthoai.length() == 0)) {
			dkcbCacheModel.Sodienthoai = null;
		}

		Date Ngaysinh = getNgaysinh();

		if (Ngaysinh != null) {
			dkcbCacheModel.Ngaysinh = Ngaysinh.getTime();
		}
		else {
			dkcbCacheModel.Ngaysinh = Long.MIN_VALUE;
		}

		dkcbCacheModel.Trieuchung = getTrieuchung();

		String Trieuchung = dkcbCacheModel.Trieuchung;

		if ((Trieuchung != null) && (Trieuchung.length() == 0)) {
			dkcbCacheModel.Trieuchung = null;
		}

		return dkcbCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", Hoten=");
		sb.append(getHoten());
		sb.append(", Diachi=");
		sb.append(getDiachi());
		sb.append(", Gioitinh=");
		sb.append(getGioitinh());
		sb.append(", Sodienthoai=");
		sb.append(getSodienthoai());
		sb.append(", Ngaysinh=");
		sb.append(getNgaysinh());
		sb.append(", Trieuchung=");
		sb.append(getTrieuchung());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.dkcb.model.DKCB");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Hoten</column-name><column-value><![CDATA[");
		sb.append(getHoten());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Diachi</column-name><column-value><![CDATA[");
		sb.append(getDiachi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Gioitinh</column-name><column-value><![CDATA[");
		sb.append(getGioitinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Sodienthoai</column-name><column-value><![CDATA[");
		sb.append(getSodienthoai());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Ngaysinh</column-name><column-value><![CDATA[");
		sb.append(getNgaysinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Trieuchung</column-name><column-value><![CDATA[");
		sb.append(getTrieuchung());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DKCB.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { DKCB.class };
	private long _Id;
	private String _Hoten;
	private String _Diachi;
	private boolean _Gioitinh;
	private String _Sodienthoai;
	private Date _Ngaysinh;
	private String _Trieuchung;
	private DKCB _escapedModel;
}