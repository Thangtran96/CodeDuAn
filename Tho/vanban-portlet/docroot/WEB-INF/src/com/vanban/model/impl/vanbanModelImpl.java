/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vanban.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vanban.model.vanban;
import com.vanban.model.vanbanModel;
import com.vanban.model.vanbanSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the vanban service. Represents a row in the &quot;vanban_vanban&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vanban.model.vanbanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link vanbanImpl}.
 * </p>
 *
 * @author nguye
 * @see vanbanImpl
 * @see com.vanban.model.vanban
 * @see com.vanban.model.vanbanModel
 * @generated
 */
@JSON(strict = true)
public class vanbanModelImpl extends BaseModelImpl<vanban>
	implements vanbanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vanban model instance should use the {@link com.vanban.model.vanban} interface instead.
	 */
	public static final String TABLE_NAME = "vanban_vanban";
	public static final Object[][] TABLE_COLUMNS = {
			{ "vanbanId", Types.BIGINT },
			{ "kihieu", Types.VARCHAR },
			{ "trichyeu", Types.VARCHAR },
			{ "ngaybanhanh", Types.TIMESTAMP },
			{ "ngaytao", Types.TIMESTAMP },
			{ "nguoikiID", Types.BIGINT },
			{ "userID", Types.BIGINT },
			{ "loaiID", Types.BIGINT },
			{ "noiBHID", Types.BIGINT },
			{ "tinhtrang", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table vanban_vanban (vanbanId LONG not null primary key,kihieu VARCHAR(75) null,trichyeu VARCHAR(75) null,ngaybanhanh DATE null,ngaytao DATE null,nguoikiID LONG,userID LONG,loaiID LONG,noiBHID LONG,tinhtrang BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table vanban_vanban";
	public static final String ORDER_BY_JPQL = " ORDER BY vanban.vanbanId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vanban_vanban.vanbanId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vanban.model.vanban"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vanban.model.vanban"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static vanban toModel(vanbanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		vanban model = new vanbanImpl();

		model.setVanbanId(soapModel.getVanbanId());
		model.setKihieu(soapModel.getKihieu());
		model.setTrichyeu(soapModel.getTrichyeu());
		model.setNgaybanhanh(soapModel.getNgaybanhanh());
		model.setNgaytao(soapModel.getNgaytao());
		model.setNguoikiID(soapModel.getNguoikiID());
		model.setUserID(soapModel.getUserID());
		model.setLoaiID(soapModel.getLoaiID());
		model.setNoiBHID(soapModel.getNoiBHID());
		model.setTinhtrang(soapModel.getTinhtrang());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<vanban> toModels(vanbanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<vanban> models = new ArrayList<vanban>(soapModels.length);

		for (vanbanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vanban.model.vanban"));

	public vanbanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _vanbanId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVanbanId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _vanbanId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return vanban.class;
	}

	@Override
	public String getModelClassName() {
		return vanban.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("vanbanId", getVanbanId());
		attributes.put("kihieu", getKihieu());
		attributes.put("trichyeu", getTrichyeu());
		attributes.put("ngaybanhanh", getNgaybanhanh());
		attributes.put("ngaytao", getNgaytao());
		attributes.put("nguoikiID", getNguoikiID());
		attributes.put("userID", getUserID());
		attributes.put("loaiID", getLoaiID());
		attributes.put("noiBHID", getNoiBHID());
		attributes.put("tinhtrang", getTinhtrang());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long vanbanId = (Long)attributes.get("vanbanId");

		if (vanbanId != null) {
			setVanbanId(vanbanId);
		}

		String kihieu = (String)attributes.get("kihieu");

		if (kihieu != null) {
			setKihieu(kihieu);
		}

		String trichyeu = (String)attributes.get("trichyeu");

		if (trichyeu != null) {
			setTrichyeu(trichyeu);
		}

		Date ngaybanhanh = (Date)attributes.get("ngaybanhanh");

		if (ngaybanhanh != null) {
			setNgaybanhanh(ngaybanhanh);
		}

		Date ngaytao = (Date)attributes.get("ngaytao");

		if (ngaytao != null) {
			setNgaytao(ngaytao);
		}

		Long nguoikiID = (Long)attributes.get("nguoikiID");

		if (nguoikiID != null) {
			setNguoikiID(nguoikiID);
		}

		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		Long loaiID = (Long)attributes.get("loaiID");

		if (loaiID != null) {
			setLoaiID(loaiID);
		}

		Long noiBHID = (Long)attributes.get("noiBHID");

		if (noiBHID != null) {
			setNoiBHID(noiBHID);
		}

		Boolean tinhtrang = (Boolean)attributes.get("tinhtrang");

		if (tinhtrang != null) {
			setTinhtrang(tinhtrang);
		}
	}

	@JSON
	@Override
	public long getVanbanId() {
		return _vanbanId;
	}

	@Override
	public void setVanbanId(long vanbanId) {
		_vanbanId = vanbanId;
	}

	@JSON
	@Override
	public String getKihieu() {
		if (_kihieu == null) {
			return StringPool.BLANK;
		}
		else {
			return _kihieu;
		}
	}

	@Override
	public void setKihieu(String kihieu) {
		_kihieu = kihieu;
	}

	@JSON
	@Override
	public String getTrichyeu() {
		if (_trichyeu == null) {
			return StringPool.BLANK;
		}
		else {
			return _trichyeu;
		}
	}

	@Override
	public void setTrichyeu(String trichyeu) {
		_trichyeu = trichyeu;
	}

	@JSON
	@Override
	public Date getNgaybanhanh() {
		return _ngaybanhanh;
	}

	@Override
	public void setNgaybanhanh(Date ngaybanhanh) {
		_ngaybanhanh = ngaybanhanh;
	}

	@JSON
	@Override
	public Date getNgaytao() {
		return _ngaytao;
	}

	@Override
	public void setNgaytao(Date ngaytao) {
		_ngaytao = ngaytao;
	}

	@JSON
	@Override
	public long getNguoikiID() {
		return _nguoikiID;
	}

	@Override
	public void setNguoikiID(long nguoikiID) {
		_nguoikiID = nguoikiID;
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_userID = userID;
	}

	@JSON
	@Override
	public long getLoaiID() {
		return _loaiID;
	}

	@Override
	public void setLoaiID(long loaiID) {
		_loaiID = loaiID;
	}

	@JSON
	@Override
	public long getNoiBHID() {
		return _noiBHID;
	}

	@Override
	public void setNoiBHID(long noiBHID) {
		_noiBHID = noiBHID;
	}

	@JSON
	@Override
	public boolean getTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public boolean isTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public void setTinhtrang(boolean tinhtrang) {
		_tinhtrang = tinhtrang;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			vanban.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public vanban toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (vanban)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		vanbanImpl vanbanImpl = new vanbanImpl();

		vanbanImpl.setVanbanId(getVanbanId());
		vanbanImpl.setKihieu(getKihieu());
		vanbanImpl.setTrichyeu(getTrichyeu());
		vanbanImpl.setNgaybanhanh(getNgaybanhanh());
		vanbanImpl.setNgaytao(getNgaytao());
		vanbanImpl.setNguoikiID(getNguoikiID());
		vanbanImpl.setUserID(getUserID());
		vanbanImpl.setLoaiID(getLoaiID());
		vanbanImpl.setNoiBHID(getNoiBHID());
		vanbanImpl.setTinhtrang(getTinhtrang());

		vanbanImpl.resetOriginalValues();

		return vanbanImpl;
	}

	@Override
	public int compareTo(vanban vanban) {
		long primaryKey = vanban.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof vanban)) {
			return false;
		}

		vanban vanban = (vanban)obj;

		long primaryKey = vanban.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<vanban> toCacheModel() {
		vanbanCacheModel vanbanCacheModel = new vanbanCacheModel();

		vanbanCacheModel.vanbanId = getVanbanId();

		vanbanCacheModel.kihieu = getKihieu();

		String kihieu = vanbanCacheModel.kihieu;

		if ((kihieu != null) && (kihieu.length() == 0)) {
			vanbanCacheModel.kihieu = null;
		}

		vanbanCacheModel.trichyeu = getTrichyeu();

		String trichyeu = vanbanCacheModel.trichyeu;

		if ((trichyeu != null) && (trichyeu.length() == 0)) {
			vanbanCacheModel.trichyeu = null;
		}

		Date ngaybanhanh = getNgaybanhanh();

		if (ngaybanhanh != null) {
			vanbanCacheModel.ngaybanhanh = ngaybanhanh.getTime();
		}
		else {
			vanbanCacheModel.ngaybanhanh = Long.MIN_VALUE;
		}

		Date ngaytao = getNgaytao();

		if (ngaytao != null) {
			vanbanCacheModel.ngaytao = ngaytao.getTime();
		}
		else {
			vanbanCacheModel.ngaytao = Long.MIN_VALUE;
		}

		vanbanCacheModel.nguoikiID = getNguoikiID();

		vanbanCacheModel.userID = getUserID();

		vanbanCacheModel.loaiID = getLoaiID();

		vanbanCacheModel.noiBHID = getNoiBHID();

		vanbanCacheModel.tinhtrang = getTinhtrang();

		return vanbanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{vanbanId=");
		sb.append(getVanbanId());
		sb.append(", kihieu=");
		sb.append(getKihieu());
		sb.append(", trichyeu=");
		sb.append(getTrichyeu());
		sb.append(", ngaybanhanh=");
		sb.append(getNgaybanhanh());
		sb.append(", ngaytao=");
		sb.append(getNgaytao());
		sb.append(", nguoikiID=");
		sb.append(getNguoikiID());
		sb.append(", userID=");
		sb.append(getUserID());
		sb.append(", loaiID=");
		sb.append(getLoaiID());
		sb.append(", noiBHID=");
		sb.append(getNoiBHID());
		sb.append(", tinhtrang=");
		sb.append(getTinhtrang());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.vanban.model.vanban");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>vanbanId</column-name><column-value><![CDATA[");
		sb.append(getVanbanId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kihieu</column-name><column-value><![CDATA[");
		sb.append(getKihieu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trichyeu</column-name><column-value><![CDATA[");
		sb.append(getTrichyeu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaybanhanh</column-name><column-value><![CDATA[");
		sb.append(getNgaybanhanh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaytao</column-name><column-value><![CDATA[");
		sb.append(getNgaytao());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nguoikiID</column-name><column-value><![CDATA[");
		sb.append(getNguoikiID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loaiID</column-name><column-value><![CDATA[");
		sb.append(getLoaiID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noiBHID</column-name><column-value><![CDATA[");
		sb.append(getNoiBHID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tinhtrang</column-name><column-value><![CDATA[");
		sb.append(getTinhtrang());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = vanban.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { vanban.class };
	private long _vanbanId;
	private String _kihieu;
	private String _trichyeu;
	private Date _ngaybanhanh;
	private Date _ngaytao;
	private long _nguoikiID;
	private long _userID;
	private long _loaiID;
	private long _noiBHID;
	private boolean _tinhtrang;
	private vanban _escapedModel;
}