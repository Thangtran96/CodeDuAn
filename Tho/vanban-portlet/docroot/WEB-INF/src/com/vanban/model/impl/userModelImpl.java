/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vanban.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vanban.model.user;
import com.vanban.model.userModel;
import com.vanban.model.userSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the user service. Represents a row in the &quot;vanban_user&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vanban.model.userModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link userImpl}.
 * </p>
 *
 * @author nguye
 * @see userImpl
 * @see com.vanban.model.user
 * @see com.vanban.model.userModel
 * @generated
 */
@JSON(strict = true)
public class userModelImpl extends BaseModelImpl<user> implements userModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user model instance should use the {@link com.vanban.model.user} interface instead.
	 */
	public static final String TABLE_NAME = "vanban_user";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "hoten", Types.VARCHAR },
			{ "ngaysinh", Types.TIMESTAMP },
			{ "gioitinh", Types.INTEGER },
			{ "diachi", Types.VARCHAR },
			{ "sdt", Types.VARCHAR },
			{ "donvi", Types.VARCHAR },
			{ "mail", Types.VARCHAR },
			{ "matkhau", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vanban_user (userId LONG not null primary key,hoten VARCHAR(75) null,ngaysinh DATE null,gioitinh INTEGER,diachi VARCHAR(75) null,sdt VARCHAR(75) null,donvi VARCHAR(75) null,mail VARCHAR(75) null,matkhau VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vanban_user";
	public static final String ORDER_BY_JPQL = " ORDER BY user.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vanban_user.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vanban.model.user"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vanban.model.user"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static user toModel(userSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		user model = new userImpl();

		model.setUserId(soapModel.getUserId());
		model.setHoten(soapModel.getHoten());
		model.setNgaysinh(soapModel.getNgaysinh());
		model.setGioitinh(soapModel.getGioitinh());
		model.setDiachi(soapModel.getDiachi());
		model.setSdt(soapModel.getSdt());
		model.setDonvi(soapModel.getDonvi());
		model.setMail(soapModel.getMail());
		model.setMatkhau(soapModel.getMatkhau());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<user> toModels(userSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<user> models = new ArrayList<user>(soapModels.length);

		for (userSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vanban.model.user"));

	public userModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return user.class;
	}

	@Override
	public String getModelClassName() {
		return user.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("hoten", getHoten());
		attributes.put("ngaysinh", getNgaysinh());
		attributes.put("gioitinh", getGioitinh());
		attributes.put("diachi", getDiachi());
		attributes.put("sdt", getSdt());
		attributes.put("donvi", getDonvi());
		attributes.put("mail", getMail());
		attributes.put("matkhau", getMatkhau());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String hoten = (String)attributes.get("hoten");

		if (hoten != null) {
			setHoten(hoten);
		}

		Date ngaysinh = (Date)attributes.get("ngaysinh");

		if (ngaysinh != null) {
			setNgaysinh(ngaysinh);
		}

		Integer gioitinh = (Integer)attributes.get("gioitinh");

		if (gioitinh != null) {
			setGioitinh(gioitinh);
		}

		String diachi = (String)attributes.get("diachi");

		if (diachi != null) {
			setDiachi(diachi);
		}

		String sdt = (String)attributes.get("sdt");

		if (sdt != null) {
			setSdt(sdt);
		}

		String donvi = (String)attributes.get("donvi");

		if (donvi != null) {
			setDonvi(donvi);
		}

		String mail = (String)attributes.get("mail");

		if (mail != null) {
			setMail(mail);
		}

		String matkhau = (String)attributes.get("matkhau");

		if (matkhau != null) {
			setMatkhau(matkhau);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getHoten() {
		if (_hoten == null) {
			return StringPool.BLANK;
		}
		else {
			return _hoten;
		}
	}

	@Override
	public void setHoten(String hoten) {
		_hoten = hoten;
	}

	@JSON
	@Override
	public Date getNgaysinh() {
		return _ngaysinh;
	}

	@Override
	public void setNgaysinh(Date ngaysinh) {
		_ngaysinh = ngaysinh;
	}

	@JSON
	@Override
	public int getGioitinh() {
		return _gioitinh;
	}

	@Override
	public void setGioitinh(int gioitinh) {
		_gioitinh = gioitinh;
	}

	@JSON
	@Override
	public String getDiachi() {
		if (_diachi == null) {
			return StringPool.BLANK;
		}
		else {
			return _diachi;
		}
	}

	@Override
	public void setDiachi(String diachi) {
		_diachi = diachi;
	}

	@JSON
	@Override
	public String getSdt() {
		if (_sdt == null) {
			return StringPool.BLANK;
		}
		else {
			return _sdt;
		}
	}

	@Override
	public void setSdt(String sdt) {
		_sdt = sdt;
	}

	@JSON
	@Override
	public String getDonvi() {
		if (_donvi == null) {
			return StringPool.BLANK;
		}
		else {
			return _donvi;
		}
	}

	@Override
	public void setDonvi(String donvi) {
		_donvi = donvi;
	}

	@JSON
	@Override
	public String getMail() {
		if (_mail == null) {
			return StringPool.BLANK;
		}
		else {
			return _mail;
		}
	}

	@Override
	public void setMail(String mail) {
		_mail = mail;
	}

	@JSON
	@Override
	public String getMatkhau() {
		if (_matkhau == null) {
			return StringPool.BLANK;
		}
		else {
			return _matkhau;
		}
	}

	@Override
	public void setMatkhau(String matkhau) {
		_matkhau = matkhau;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			user.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public user toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (user)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		userImpl userImpl = new userImpl();

		userImpl.setUserId(getUserId());
		userImpl.setHoten(getHoten());
		userImpl.setNgaysinh(getNgaysinh());
		userImpl.setGioitinh(getGioitinh());
		userImpl.setDiachi(getDiachi());
		userImpl.setSdt(getSdt());
		userImpl.setDonvi(getDonvi());
		userImpl.setMail(getMail());
		userImpl.setMatkhau(getMatkhau());

		userImpl.resetOriginalValues();

		return userImpl;
	}

	@Override
	public int compareTo(user user) {
		long primaryKey = user.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof user)) {
			return false;
		}

		user user = (user)obj;

		long primaryKey = user.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<user> toCacheModel() {
		userCacheModel userCacheModel = new userCacheModel();

		userCacheModel.userId = getUserId();

		userCacheModel.hoten = getHoten();

		String hoten = userCacheModel.hoten;

		if ((hoten != null) && (hoten.length() == 0)) {
			userCacheModel.hoten = null;
		}

		Date ngaysinh = getNgaysinh();

		if (ngaysinh != null) {
			userCacheModel.ngaysinh = ngaysinh.getTime();
		}
		else {
			userCacheModel.ngaysinh = Long.MIN_VALUE;
		}

		userCacheModel.gioitinh = getGioitinh();

		userCacheModel.diachi = getDiachi();

		String diachi = userCacheModel.diachi;

		if ((diachi != null) && (diachi.length() == 0)) {
			userCacheModel.diachi = null;
		}

		userCacheModel.sdt = getSdt();

		String sdt = userCacheModel.sdt;

		if ((sdt != null) && (sdt.length() == 0)) {
			userCacheModel.sdt = null;
		}

		userCacheModel.donvi = getDonvi();

		String donvi = userCacheModel.donvi;

		if ((donvi != null) && (donvi.length() == 0)) {
			userCacheModel.donvi = null;
		}

		userCacheModel.mail = getMail();

		String mail = userCacheModel.mail;

		if ((mail != null) && (mail.length() == 0)) {
			userCacheModel.mail = null;
		}

		userCacheModel.matkhau = getMatkhau();

		String matkhau = userCacheModel.matkhau;

		if ((matkhau != null) && (matkhau.length() == 0)) {
			userCacheModel.matkhau = null;
		}

		return userCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", hoten=");
		sb.append(getHoten());
		sb.append(", ngaysinh=");
		sb.append(getNgaysinh());
		sb.append(", gioitinh=");
		sb.append(getGioitinh());
		sb.append(", diachi=");
		sb.append(getDiachi());
		sb.append(", sdt=");
		sb.append(getSdt());
		sb.append(", donvi=");
		sb.append(getDonvi());
		sb.append(", mail=");
		sb.append(getMail());
		sb.append(", matkhau=");
		sb.append(getMatkhau());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.vanban.model.user");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoten</column-name><column-value><![CDATA[");
		sb.append(getHoten());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaysinh</column-name><column-value><![CDATA[");
		sb.append(getNgaysinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gioitinh</column-name><column-value><![CDATA[");
		sb.append(getGioitinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diachi</column-name><column-value><![CDATA[");
		sb.append(getDiachi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sdt</column-name><column-value><![CDATA[");
		sb.append(getSdt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donvi</column-name><column-value><![CDATA[");
		sb.append(getDonvi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mail</column-name><column-value><![CDATA[");
		sb.append(getMail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matkhau</column-name><column-value><![CDATA[");
		sb.append(getMatkhau());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = user.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { user.class };
	private long _userId;
	private String _userUuid;
	private String _hoten;
	private Date _ngaysinh;
	private int _gioitinh;
	private String _diachi;
	private String _sdt;
	private String _donvi;
	private String _mail;
	private String _matkhau;
	private user _escapedModel;
}