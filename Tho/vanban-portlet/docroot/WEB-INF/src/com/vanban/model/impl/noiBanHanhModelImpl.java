/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vanban.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vanban.model.noiBanHanh;
import com.vanban.model.noiBanHanhModel;
import com.vanban.model.noiBanHanhSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the noiBanHanh service. Represents a row in the &quot;vanban_noiBanHanh&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vanban.model.noiBanHanhModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link noiBanHanhImpl}.
 * </p>
 *
 * @author nguye
 * @see noiBanHanhImpl
 * @see com.vanban.model.noiBanHanh
 * @see com.vanban.model.noiBanHanhModel
 * @generated
 */
@JSON(strict = true)
public class noiBanHanhModelImpl extends BaseModelImpl<noiBanHanh>
	implements noiBanHanhModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a noi ban hanh model instance should use the {@link com.vanban.model.noiBanHanh} interface instead.
	 */
	public static final String TABLE_NAME = "vanban_noiBanHanh";
	public static final Object[][] TABLE_COLUMNS = {
			{ "noiBHId", Types.BIGINT },
			{ "tennoibanhanh", Types.VARCHAR },
			{ "ghichu", Types.VARCHAR },
			{ "tinhtrang", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table vanban_noiBanHanh (noiBHId LONG not null primary key,tennoibanhanh VARCHAR(75) null,ghichu VARCHAR(75) null,tinhtrang BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table vanban_noiBanHanh";
	public static final String ORDER_BY_JPQL = " ORDER BY noiBanHanh.noiBHId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vanban_noiBanHanh.noiBHId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vanban.model.noiBanHanh"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vanban.model.noiBanHanh"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static noiBanHanh toModel(noiBanHanhSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		noiBanHanh model = new noiBanHanhImpl();

		model.setNoiBHId(soapModel.getNoiBHId());
		model.setTennoibanhanh(soapModel.getTennoibanhanh());
		model.setGhichu(soapModel.getGhichu());
		model.setTinhtrang(soapModel.getTinhtrang());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<noiBanHanh> toModels(noiBanHanhSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<noiBanHanh> models = new ArrayList<noiBanHanh>(soapModels.length);

		for (noiBanHanhSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vanban.model.noiBanHanh"));

	public noiBanHanhModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _noiBHId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNoiBHId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _noiBHId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return noiBanHanh.class;
	}

	@Override
	public String getModelClassName() {
		return noiBanHanh.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("noiBHId", getNoiBHId());
		attributes.put("tennoibanhanh", getTennoibanhanh());
		attributes.put("ghichu", getGhichu());
		attributes.put("tinhtrang", getTinhtrang());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long noiBHId = (Long)attributes.get("noiBHId");

		if (noiBHId != null) {
			setNoiBHId(noiBHId);
		}

		String tennoibanhanh = (String)attributes.get("tennoibanhanh");

		if (tennoibanhanh != null) {
			setTennoibanhanh(tennoibanhanh);
		}

		String ghichu = (String)attributes.get("ghichu");

		if (ghichu != null) {
			setGhichu(ghichu);
		}

		Boolean tinhtrang = (Boolean)attributes.get("tinhtrang");

		if (tinhtrang != null) {
			setTinhtrang(tinhtrang);
		}
	}

	@JSON
	@Override
	public long getNoiBHId() {
		return _noiBHId;
	}

	@Override
	public void setNoiBHId(long noiBHId) {
		_noiBHId = noiBHId;
	}

	@JSON
	@Override
	public String getTennoibanhanh() {
		if (_tennoibanhanh == null) {
			return StringPool.BLANK;
		}
		else {
			return _tennoibanhanh;
		}
	}

	@Override
	public void setTennoibanhanh(String tennoibanhanh) {
		_tennoibanhanh = tennoibanhanh;
	}

	@JSON
	@Override
	public String getGhichu() {
		if (_ghichu == null) {
			return StringPool.BLANK;
		}
		else {
			return _ghichu;
		}
	}

	@Override
	public void setGhichu(String ghichu) {
		_ghichu = ghichu;
	}

	@JSON
	@Override
	public boolean getTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public boolean isTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public void setTinhtrang(boolean tinhtrang) {
		_tinhtrang = tinhtrang;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			noiBanHanh.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public noiBanHanh toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (noiBanHanh)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		noiBanHanhImpl noiBanHanhImpl = new noiBanHanhImpl();

		noiBanHanhImpl.setNoiBHId(getNoiBHId());
		noiBanHanhImpl.setTennoibanhanh(getTennoibanhanh());
		noiBanHanhImpl.setGhichu(getGhichu());
		noiBanHanhImpl.setTinhtrang(getTinhtrang());

		noiBanHanhImpl.resetOriginalValues();

		return noiBanHanhImpl;
	}

	@Override
	public int compareTo(noiBanHanh noiBanHanh) {
		long primaryKey = noiBanHanh.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof noiBanHanh)) {
			return false;
		}

		noiBanHanh noiBanHanh = (noiBanHanh)obj;

		long primaryKey = noiBanHanh.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<noiBanHanh> toCacheModel() {
		noiBanHanhCacheModel noiBanHanhCacheModel = new noiBanHanhCacheModel();

		noiBanHanhCacheModel.noiBHId = getNoiBHId();

		noiBanHanhCacheModel.tennoibanhanh = getTennoibanhanh();

		String tennoibanhanh = noiBanHanhCacheModel.tennoibanhanh;

		if ((tennoibanhanh != null) && (tennoibanhanh.length() == 0)) {
			noiBanHanhCacheModel.tennoibanhanh = null;
		}

		noiBanHanhCacheModel.ghichu = getGhichu();

		String ghichu = noiBanHanhCacheModel.ghichu;

		if ((ghichu != null) && (ghichu.length() == 0)) {
			noiBanHanhCacheModel.ghichu = null;
		}

		noiBanHanhCacheModel.tinhtrang = getTinhtrang();

		return noiBanHanhCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{noiBHId=");
		sb.append(getNoiBHId());
		sb.append(", tennoibanhanh=");
		sb.append(getTennoibanhanh());
		sb.append(", ghichu=");
		sb.append(getGhichu());
		sb.append(", tinhtrang=");
		sb.append(getTinhtrang());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.vanban.model.noiBanHanh");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>noiBHId</column-name><column-value><![CDATA[");
		sb.append(getNoiBHId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tennoibanhanh</column-name><column-value><![CDATA[");
		sb.append(getTennoibanhanh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ghichu</column-name><column-value><![CDATA[");
		sb.append(getGhichu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tinhtrang</column-name><column-value><![CDATA[");
		sb.append(getTinhtrang());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = noiBanHanh.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			noiBanHanh.class
		};
	private long _noiBHId;
	private String _tennoibanhanh;
	private String _ghichu;
	private boolean _tinhtrang;
	private noiBanHanh _escapedModel;
}