/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vanban.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vanban.model.nguoiki;
import com.vanban.model.nguoikiModel;
import com.vanban.model.nguoikiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the nguoiki service. Represents a row in the &quot;vanban_nguoiki&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vanban.model.nguoikiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link nguoikiImpl}.
 * </p>
 *
 * @author nguye
 * @see nguoikiImpl
 * @see com.vanban.model.nguoiki
 * @see com.vanban.model.nguoikiModel
 * @generated
 */
@JSON(strict = true)
public class nguoikiModelImpl extends BaseModelImpl<nguoiki>
	implements nguoikiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nguoiki model instance should use the {@link com.vanban.model.nguoiki} interface instead.
	 */
	public static final String TABLE_NAME = "vanban_nguoiki";
	public static final Object[][] TABLE_COLUMNS = {
			{ "nguoikiID", Types.BIGINT },
			{ "hoten", Types.VARCHAR },
			{ "ngaysinh", Types.TIMESTAMP },
			{ "gioitinh", Types.INTEGER },
			{ "donvi", Types.VARCHAR },
			{ "chucvu", Types.VARCHAR },
			{ "tinhtrang", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table vanban_nguoiki (nguoikiID LONG not null primary key,hoten VARCHAR(75) null,ngaysinh DATE null,gioitinh INTEGER,donvi VARCHAR(75) null,chucvu VARCHAR(75) null,tinhtrang BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table vanban_nguoiki";
	public static final String ORDER_BY_JPQL = " ORDER BY nguoiki.nguoikiID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vanban_nguoiki.nguoikiID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vanban.model.nguoiki"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vanban.model.nguoiki"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static nguoiki toModel(nguoikiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		nguoiki model = new nguoikiImpl();

		model.setNguoikiID(soapModel.getNguoikiID());
		model.setHoten(soapModel.getHoten());
		model.setNgaysinh(soapModel.getNgaysinh());
		model.setGioitinh(soapModel.getGioitinh());
		model.setDonvi(soapModel.getDonvi());
		model.setChucvu(soapModel.getChucvu());
		model.setTinhtrang(soapModel.getTinhtrang());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<nguoiki> toModels(nguoikiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<nguoiki> models = new ArrayList<nguoiki>(soapModels.length);

		for (nguoikiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vanban.model.nguoiki"));

	public nguoikiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _nguoikiID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNguoikiID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _nguoikiID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return nguoiki.class;
	}

	@Override
	public String getModelClassName() {
		return nguoiki.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("nguoikiID", getNguoikiID());
		attributes.put("hoten", getHoten());
		attributes.put("ngaysinh", getNgaysinh());
		attributes.put("gioitinh", getGioitinh());
		attributes.put("donvi", getDonvi());
		attributes.put("chucvu", getChucvu());
		attributes.put("tinhtrang", getTinhtrang());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long nguoikiID = (Long)attributes.get("nguoikiID");

		if (nguoikiID != null) {
			setNguoikiID(nguoikiID);
		}

		String hoten = (String)attributes.get("hoten");

		if (hoten != null) {
			setHoten(hoten);
		}

		Date ngaysinh = (Date)attributes.get("ngaysinh");

		if (ngaysinh != null) {
			setNgaysinh(ngaysinh);
		}

		Integer gioitinh = (Integer)attributes.get("gioitinh");

		if (gioitinh != null) {
			setGioitinh(gioitinh);
		}

		String donvi = (String)attributes.get("donvi");

		if (donvi != null) {
			setDonvi(donvi);
		}

		String chucvu = (String)attributes.get("chucvu");

		if (chucvu != null) {
			setChucvu(chucvu);
		}

		Boolean tinhtrang = (Boolean)attributes.get("tinhtrang");

		if (tinhtrang != null) {
			setTinhtrang(tinhtrang);
		}
	}

	@JSON
	@Override
	public long getNguoikiID() {
		return _nguoikiID;
	}

	@Override
	public void setNguoikiID(long nguoikiID) {
		_nguoikiID = nguoikiID;
	}

	@JSON
	@Override
	public String getHoten() {
		if (_hoten == null) {
			return StringPool.BLANK;
		}
		else {
			return _hoten;
		}
	}

	@Override
	public void setHoten(String hoten) {
		_hoten = hoten;
	}

	@JSON
	@Override
	public Date getNgaysinh() {
		return _ngaysinh;
	}

	@Override
	public void setNgaysinh(Date ngaysinh) {
		_ngaysinh = ngaysinh;
	}

	@JSON
	@Override
	public int getGioitinh() {
		return _gioitinh;
	}

	@Override
	public void setGioitinh(int gioitinh) {
		_gioitinh = gioitinh;
	}

	@JSON
	@Override
	public String getDonvi() {
		if (_donvi == null) {
			return StringPool.BLANK;
		}
		else {
			return _donvi;
		}
	}

	@Override
	public void setDonvi(String donvi) {
		_donvi = donvi;
	}

	@JSON
	@Override
	public String getChucvu() {
		if (_chucvu == null) {
			return StringPool.BLANK;
		}
		else {
			return _chucvu;
		}
	}

	@Override
	public void setChucvu(String chucvu) {
		_chucvu = chucvu;
	}

	@JSON
	@Override
	public boolean getTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public boolean isTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public void setTinhtrang(boolean tinhtrang) {
		_tinhtrang = tinhtrang;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			nguoiki.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public nguoiki toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (nguoiki)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		nguoikiImpl nguoikiImpl = new nguoikiImpl();

		nguoikiImpl.setNguoikiID(getNguoikiID());
		nguoikiImpl.setHoten(getHoten());
		nguoikiImpl.setNgaysinh(getNgaysinh());
		nguoikiImpl.setGioitinh(getGioitinh());
		nguoikiImpl.setDonvi(getDonvi());
		nguoikiImpl.setChucvu(getChucvu());
		nguoikiImpl.setTinhtrang(getTinhtrang());

		nguoikiImpl.resetOriginalValues();

		return nguoikiImpl;
	}

	@Override
	public int compareTo(nguoiki nguoiki) {
		long primaryKey = nguoiki.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof nguoiki)) {
			return false;
		}

		nguoiki nguoiki = (nguoiki)obj;

		long primaryKey = nguoiki.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<nguoiki> toCacheModel() {
		nguoikiCacheModel nguoikiCacheModel = new nguoikiCacheModel();

		nguoikiCacheModel.nguoikiID = getNguoikiID();

		nguoikiCacheModel.hoten = getHoten();

		String hoten = nguoikiCacheModel.hoten;

		if ((hoten != null) && (hoten.length() == 0)) {
			nguoikiCacheModel.hoten = null;
		}

		Date ngaysinh = getNgaysinh();

		if (ngaysinh != null) {
			nguoikiCacheModel.ngaysinh = ngaysinh.getTime();
		}
		else {
			nguoikiCacheModel.ngaysinh = Long.MIN_VALUE;
		}

		nguoikiCacheModel.gioitinh = getGioitinh();

		nguoikiCacheModel.donvi = getDonvi();

		String donvi = nguoikiCacheModel.donvi;

		if ((donvi != null) && (donvi.length() == 0)) {
			nguoikiCacheModel.donvi = null;
		}

		nguoikiCacheModel.chucvu = getChucvu();

		String chucvu = nguoikiCacheModel.chucvu;

		if ((chucvu != null) && (chucvu.length() == 0)) {
			nguoikiCacheModel.chucvu = null;
		}

		nguoikiCacheModel.tinhtrang = getTinhtrang();

		return nguoikiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{nguoikiID=");
		sb.append(getNguoikiID());
		sb.append(", hoten=");
		sb.append(getHoten());
		sb.append(", ngaysinh=");
		sb.append(getNgaysinh());
		sb.append(", gioitinh=");
		sb.append(getGioitinh());
		sb.append(", donvi=");
		sb.append(getDonvi());
		sb.append(", chucvu=");
		sb.append(getChucvu());
		sb.append(", tinhtrang=");
		sb.append(getTinhtrang());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.vanban.model.nguoiki");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>nguoikiID</column-name><column-value><![CDATA[");
		sb.append(getNguoikiID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoten</column-name><column-value><![CDATA[");
		sb.append(getHoten());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaysinh</column-name><column-value><![CDATA[");
		sb.append(getNgaysinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gioitinh</column-name><column-value><![CDATA[");
		sb.append(getGioitinh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donvi</column-name><column-value><![CDATA[");
		sb.append(getDonvi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chucvu</column-name><column-value><![CDATA[");
		sb.append(getChucvu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tinhtrang</column-name><column-value><![CDATA[");
		sb.append(getTinhtrang());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = nguoiki.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			nguoiki.class
		};
	private long _nguoikiID;
	private String _hoten;
	private Date _ngaysinh;
	private int _gioitinh;
	private String _donvi;
	private String _chucvu;
	private boolean _tinhtrang;
	private nguoiki _escapedModel;
}